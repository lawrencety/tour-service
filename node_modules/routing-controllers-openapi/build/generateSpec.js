"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expressToOpenAPIPath = exports.getTags = exports.getSummary = exports.getSpec = exports.getResponses = exports.getStatusCode = exports.getContentType = exports.getRequestBody = exports.getQueryParams = exports.getPathParams = exports.getHeaderParams = exports.getPaths = exports.getOperationId = exports.getOperation = exports.getFullPath = exports.getFullExpressPath = void 0;
const _ = require("lodash");
const pathToRegexp = require("path-to-regexp");
require("reflect-metadata");
const decorators_1 = require("./decorators");
function getFullExpressPath(route) {
    const { action, controller, options } = route;
    return ((options.routePrefix || '') +
        (controller.route || '') +
        (action.route || ''));
}
exports.getFullExpressPath = getFullExpressPath;
function getFullPath(route) {
    return expressToOpenAPIPath(getFullExpressPath(route));
}
exports.getFullPath = getFullPath;
function getOperation(route, schemas) {
    const operation = {
        operationId: getOperationId(route),
        parameters: [
            ...getHeaderParams(route),
            ...getPathParams(route),
            ...getQueryParams(route, schemas),
        ],
        requestBody: getRequestBody(route) || undefined,
        responses: getResponses(route),
        summary: getSummary(route),
        tags: getTags(route),
    };
    const cleanedOperation = _.omitBy(operation, _.isEmpty);
    return decorators_1.applyOpenAPIDecorator(cleanedOperation, route);
}
exports.getOperation = getOperation;
function getOperationId(route) {
    return `${route.action.target.name}.${route.action.method}`;
}
exports.getOperationId = getOperationId;
function getPaths(routes, schemas) {
    const routePaths = routes.map((route) => ({
        [getFullPath(route)]: {
            [route.action.type]: getOperation(route, schemas),
        },
    }));
    return _.merge(...routePaths);
}
exports.getPaths = getPaths;
function getHeaderParams(route) {
    const headers = _(route.params)
        .filter({ type: 'header' })
        .map((headerMeta) => {
        const schema = getParamSchema(headerMeta);
        return {
            in: 'header',
            name: headerMeta.name || '',
            required: isRequired(headerMeta, route),
            schema,
        };
    })
        .value();
    const headersMeta = _.find(route.params, { type: 'headers' });
    if (headersMeta) {
        const schema = getParamSchema(headersMeta);
        headers.push({
            in: 'header',
            name: _.last(_.split(schema.$ref, '/')) || '',
            required: isRequired(headersMeta, route),
            schema,
        });
    }
    return headers;
}
exports.getHeaderParams = getHeaderParams;
function getPathParams(route) {
    const path = getFullExpressPath(route);
    const tokens = pathToRegexp.parse(path);
    return tokens
        .filter(_.isObject)
        .map((token) => {
        const name = token.name + '';
        const param = {
            in: 'path',
            name,
            required: !token.optional,
            schema: { type: 'string' },
        };
        if (token.pattern && token.pattern !== '[^\\/]+?') {
            param.schema = { pattern: token.pattern, type: 'string' };
        }
        const meta = _.find(route.params, { name, type: 'param' });
        if (meta) {
            const metaSchema = getParamSchema(meta);
            param.schema =
                'type' in metaSchema ? Object.assign(Object.assign({}, param.schema), metaSchema) : metaSchema;
        }
        return param;
    });
}
exports.getPathParams = getPathParams;
function getQueryParams(route, schemas) {
    var _a;
    const queries = _(route.params)
        .filter({ type: 'query' })
        .map((queryMeta) => {
        const schema = getParamSchema(queryMeta);
        return {
            in: 'query',
            name: queryMeta.name || '',
            required: isRequired(queryMeta, route),
            schema,
        };
    })
        .value();
    const queriesMeta = _.find(route.params, { type: 'queries' });
    if (queriesMeta) {
        const paramSchema = getParamSchema(queriesMeta);
        const paramSchemaName = _.last(_.split(paramSchema.$ref, '/')) || '';
        const currentSchema = schemas[paramSchemaName];
        for (const [name, schema] of Object.entries((currentSchema === null || currentSchema === void 0 ? void 0 : currentSchema.properties) || {})) {
            queries.push({
                in: 'query',
                name,
                required: (_a = currentSchema.required) === null || _a === void 0 ? void 0 : _a.includes(name),
                schema,
            });
        }
    }
    return queries;
}
exports.getQueryParams = getQueryParams;
function getRequestBody(route) {
    const bodyParamMetas = route.params.filter((d) => d.type === 'body-param');
    const bodyParamsSchema = bodyParamMetas.length > 0
        ? bodyParamMetas.reduce((acc, d) => (Object.assign(Object.assign({}, acc), { properties: Object.assign(Object.assign({}, acc.properties), { [d.name]: getParamSchema(d) }), required: isRequired(d, route)
                ? [...(acc.required || []), d.name]
                : acc.required })), { properties: {}, required: [], type: 'object' })
        : null;
    const bodyMeta = route.params.find((d) => d.type === 'body');
    if (bodyMeta) {
        const bodySchema = getParamSchema(bodyMeta);
        const { $ref } = 'items' in bodySchema && bodySchema.items ? bodySchema.items : bodySchema;
        return {
            content: {
                'application/json': {
                    schema: bodyParamsSchema
                        ? { allOf: [bodySchema, bodyParamsSchema] }
                        : bodySchema,
                },
            },
            description: _.last(_.split($ref, '/')),
            required: isRequired(bodyMeta, route),
        };
    }
    else if (bodyParamsSchema) {
        return {
            content: { 'application/json': { schema: bodyParamsSchema } },
        };
    }
}
exports.getRequestBody = getRequestBody;
function getContentType(route) {
    const defaultContentType = route.controller.type === 'json'
        ? 'application/json'
        : 'text/html; charset=utf-8';
    const contentMeta = _.find(route.responseHandlers, { type: 'content-type' });
    return contentMeta ? contentMeta.value : defaultContentType;
}
exports.getContentType = getContentType;
function getStatusCode(route) {
    const successMeta = _.find(route.responseHandlers, { type: 'success-code' });
    return successMeta ? successMeta.value + '' : '200';
}
exports.getStatusCode = getStatusCode;
function getResponses(route) {
    const contentType = getContentType(route);
    const successStatus = getStatusCode(route);
    return {
        [successStatus]: {
            content: { [contentType]: {} },
            description: 'Successful response',
        },
    };
}
exports.getResponses = getResponses;
function getSpec(routes, schemas) {
    return {
        components: { schemas: {} },
        info: { title: '', version: '1.0.0' },
        openapi: '3.0.0',
        paths: getPaths(routes, schemas),
    };
}
exports.getSpec = getSpec;
function getSummary(route) {
    return _.capitalize(_.startCase(route.action.method));
}
exports.getSummary = getSummary;
function getTags(route) {
    return [_.startCase(route.controller.target.name.replace(/Controller$/, ''))];
}
exports.getTags = getTags;
function expressToOpenAPIPath(expressPath) {
    const tokens = pathToRegexp.parse(expressPath);
    return tokens
        .map((d) => (_.isString(d) ? d : `${d.prefix}{${d.name}}`))
        .join('');
}
exports.expressToOpenAPIPath = expressToOpenAPIPath;
function isRequired(meta, route) {
    const globalRequired = _.get(route.options, 'defaults.paramOptions.required');
    return globalRequired ? meta.required !== false : !!meta.required;
}
function getParamSchema(param) {
    const { explicitType, index, object, method } = param;
    const type = Reflect.getMetadata('design:paramtypes', object, method)[index];
    if (_.isFunction(type) && type.name === 'Array') {
        const items = explicitType
            ? { $ref: '#/components/schemas/' + explicitType.name }
            : { type: 'object' };
        return { items, type: 'array' };
    }
    if (explicitType) {
        return { $ref: '#/components/schemas/' + explicitType.name };
    }
    if (_.isFunction(type)) {
        if (_.isString(type.prototype) || _.isSymbol(type.prototype)) {
            return { type: 'string' };
        }
        else if (_.isNumber(type.prototype)) {
            return { type: 'number' };
        }
        else if (_.isBoolean(type.prototype)) {
            return { type: 'boolean' };
        }
        else if (type.name !== 'Object') {
            return { $ref: '#/components/schemas/' + type.name };
        }
    }
    return {};
}
//# sourceMappingURL=data:application/json;base64,